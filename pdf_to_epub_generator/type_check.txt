




We want a class that figures out the structure of the book:

Including
- a class that detects pre-content, main content, and post-content parts, using simple regex to detect changes in structure.
this class will try and figure out where the pre-content ends and main content begins, and where the main content ends and end content begins.

For example, we use regex to search for string-phrases (preface, foreword, introduction, prologue).


We count main-content as soon as we start seeing a counter of possible numbered-references like .1, .2, .3, .4-5,... or [1], [2], etc, ...
Figure out every possible regex needed for detecting any incremental numbering of citations. If we get numbers 1, 2, 3 consecutively, using such a system.
what we want is to go through the text, and extract the numbers in order, and then count the number of times that two numbers appear consecutively and one is the successor of the other in the last 3000 characters.
And then count the number of times that three consecutive numbers appeared in the last 5000 characters.

If we count consecutive pairs 3 times, and consecutive triples once, then go back to the first consecutive pair of numbers in the last 5000 characters.
If they are "1" and "2", and at least one appears right after a fullstop '.', a dash '-', or a bracket "[" or a comma,





Front Matter (Pre-Content)

Title Page - Main title, subtitle, author(s), publisher
Copyright Page - Publication details, ISBN, legal notices
Dedication - Personal dedication by author
Epigraph - Inspirational quote or passage
Table of Contents - Chapter/section listings
List of Figures - Numbered figures with page references
List of Tables - Numbered tables with page references
List of Maps - If applicable
List of Plates - For books with photo/illustration sections
List of Abbreviations/Acronyms - Common abbreviations used
Preface - Author's personal introduction to the work
Foreword - Introduction written by someone other than the author
Acknowledgments - Credits and thanks (can also appear in back matter)
Introduction - Sets context, methodology, scope
Prologue - Scene-setting or background narrative

Main Content

Numbered Chapters (Chapter 1, Chapter 2, etc.)
Named Chapters (thematic titles without numbers)
Parts/Sections - Major divisions containing multiple chapters
Case Studies - Detailed examinations of specific examples
Interludes - Brief connecting sections between major parts

Back Matter (Post-Content)

Conclusion - Summary and final thoughts
Epilogue - Aftermath or future implications
Afterword - Reflective commentary, often by another author
Postscript - Additional thoughts added after main writing
Appendices (A, B, C, etc.) - Supplementary data, documents, proofs
Glossary - Definitions of technical terms
Bibliography - Comprehensive source list
References - Sources actually cited
Works Cited - Alternative term for references
Further Reading - Suggested additional sources
Notes - Footnotes/endnotes collected
Index - Alphabetical topic/name finder
About the Author - Biographical information
Colophon - Publication and design details




We want a class that does an initial run through the book-to figure out bibliography, citation, and reference structure, as well as book meta-data

Example of a copyright page for a book:

Copyright MORAL MINDS . Copyright © 2006 by Marc D. Hauser. All rights reserved
under International and Pan-American Copyright Conventions. By
payment of the required fees, you have been granted the non-exclusive,
non-transferable right to access and read the text of this e-book on-screen.
No part of this text may be reproduced, transmitted, down-loaded,
decompiled, reverse engineered, or stored in or introduced into any
information storage and retrieval system, in any form or by any means,
whether electronic or mechanical, now known or hereinafter invented,
without the express written permission of HarperCollins e-books.
Adobe Acrobat eBook Reader August 2007 ISBN 978-0-06-149448-2
10 9 8 7 6 5 4 3 2 1


So, when we first pass through the book, we want to find the copyright page. Write a class that does the following:

The class could search for key-phrase "copyright", and/or the Copyright © symbol. If it finds the © symbol, then I want you to
use the GLiner entity detection on all the following:

Essential Metadata:

Book Title - Usually appears at the top
book Subtitle - a subtitle, can appear after a colon of the book title, for example.
Copyright Holder - Author or publisher name
Copyright Year - When the book was copyrighted
First Author - Full Name
Second Author - Full Name
Third Author - Full Name
All Authors - list of full names
Publisher Information - Publishing house and imprints
ISBN(s) - Often multiple for different formats (print, ebook, hardcover, paperback)

Publication Details:

Edition Number - 1st edition, 2nd edition, etc.
Printing Number - Often shown as "10 9 8 7 6 5 4 3 2 1" sequence
Publication Date - When published (may differ from copyright)
Print Location - "Printed in the United States"

E-book Specifics:

E-book Platform - "Adobe Acrobat eBook Reader", "Kindle", etc.
Digital Rights - Specific e-book licensing terms
Format-specific ISBNs - Different ISBNs for digital vs print

Library Cataloging:

Library of Congress Number
Dewey Decimal Classification
CIP (Cataloging in Publication) data

Legal Information:

Rights Statements - "All rights reserved", reproduction restrictions
International Copyright - Pan-American, Berne Convention references


we will create a nested json dictionary for our book, and the first will be a key/value where the key is "book metadata"
and the value will a dictionary of pairs (the above), where those pairs are key/values. The default value will be null.
We also want a book subtitle entity if one exists. Default value will be null there as well.
The first author, second author, third author will all be default null. We only go up to 3 authors.
We fill in first author only if there's only one author. If there are two, we fill in first two, etc. If there are more than 3 authors, we list all author full names as a list of strings
in All Authors

The full names are given (either first and last name, or initials and last name are typically what a full name is)

We also want search string key/value in book metadata, where the search string will be a concatenated string of the following values, if they are not null:
"Title + Subtitle + First Author + Second Author + Third Author + publication date + publisher + Edition Number"

So, create a single class that uses GLiner to create the "book metadata" nested dictionary. And as a default option, we will print it out with indent=4 in terminal,
with another test option to save the actual nested dictionary as a file (called book_metadata.json) in a directory that we create if it doesn't exist, called testing_directory

The next phase will be to figure out how many chapters are in the book, and what are the chapter names and numbers for each name?
Here, we construct a nested dictionary of each chapter name and number of the chapter, and the page start/end of each chapter.
We print this out once done as well, and save the nested dictionary as a json file to the testing_directory. (as chapter_metadata.json)

{ chapter-title: },{chapter-number: }, {chapter_page_start: }, {chapter_page_end: }, [{subsections: {subsection_name: }, {subsection_page_start:, }{subsection_page_end:,}{subsection_number: }]]

It should be easy to create this class.

So far then, we want you to create the class for constructing the book metadata,
 and chapter metadata (this includes preface (to each edition), intro, forewords, prologues, epilogues, conclusion, etc), and page numbers can be roman numerals


The next phase will be to figure out what the citation/referencing format is like:

We want you to create a class that answers the following questions:

(1) Does the book have a bibliography?
(2) Does the book use endnotes
(3) Does the book use footnotes
(4) Does the book use in-text citations?

We want you to create classes answering each of these questions,
and use fast cpu based methods only to do it initially,
to figure out the likelihood of each being true.

For example, if we do not have in-text citations, then we do not have to use gpu entity recognition to extract references. This will help.

Here are some ideas for fast methods to figure out if we have a bibliography:

First, use regex to find the word "bibliography" or "references" or "notes".

If we do not find, then use regex to find the existence of bibliographic like formatting.
For example, these are journal article and book references in a bibliography:

Abell, F., Happe, F., & Frith, U. (2000). Do triangles play tricks? Attribution of mental
states to animated shapes in normal and abnormal development. Cognitive Develop-ment, 15, 1–16.
Abu-Odeh, L. (1997). Comparatively speaking: the “honor” of the “east” and the “passion”
of the “west.” Utah Law Review, 281, 287–307.
Adolphs, R. (2003). Cognitive neuroscience of human social behavior. Nature Neuroscience
Reviews, 4, 165–178.
Adolphs, R., Tranel, D., & Damasio, A. (1998). The human amygdala in social judgment.
Nature, 393, 470–474.
Ainslie, G. (2000). Break-Down of Will. New York: Cambridge University Press.
Alexander, R. D. (1987). The Biology of Moral Systems. New York: Aldine de Gruyter.
Allport, G. W. (1954). The Nature of Prejudice. Cambridge: Addison-Wesley.
Almor, A., & Sloman, S. (1996). Is deontic reasoning special? Psychological Review, 103,
374–380.
Altmann, J. (1980). Baboon Mothers and Infants. Cambridge, MA: Harvard University Press.
Anderson, J. R., Myowa-Yamakoshi, M., & Matsuzawa, T. (2004). Contagious yawning in
chimpanzees. Proceedings of the Royal Society, London, Biology Letters, 4, S1–S3.
Anderson, S. R., & Lightfoot, D. (2000). The human language faculty as an organ. Annual
Review of Physiology, 62, 697–722.

We want regex that would detect a range of patterns that show up in any list of bibliography or references.

For example,   '#-#' where # is a number.   Capital letter then . like S. and with a space in between, like ' S. '
or  'S., ' and then (####) on the same line.

If we get a high count and concentration of these types of regex expressions, then the answer is yes.
You decide what a high count is.



checks for distinct types-up to 20 types here:

we want to check if

Numbered Endnotes (Global) - Sequential numbering throughout entire book (1, 2, 3...)
Numbered Endnotes (Chapter-wise) - Numbering resets per chapter (1-20 per chapter)
Author-Date In-text + Bibliography - (Smith, 2020) with full reference list
Numbered Footnotes (Page-wise) - Numbers reset on each page
Numbered Footnotes (Chapter-wise) - Numbers reset per chapter
Mixed Footnotes + Endnotes - Some references at page bottom, others at end
Superscript Numbers + Bibliography - Numbered citations linking to numbered bibliography
Bracketed Numbers - [1], [2], [3] with endnote matching




Here are the key differences between these citation and reference systems in books:

Bibliography
A comprehensive list of all sources consulted during research, typically appearing at the end of the book. It may include sources that weren't directly cited in the text but influenced the author's thinking. Usually alphabetically organized by author's last name.

References/Works Cited
A list of only the sources that were actually cited or quoted in the text. More selective than a bibliography. "References" is common in sciences, "Works Cited" in humanities.

Footnotes
Numbered citations that appear at the bottom of each page, providing immediate access to source information or additional commentary. Readers don't need to flip pages to see the reference.

Endnotes
Numbered citations collected at the end of each chapter or at the book's end. They serve the same function as footnotes but don't clutter individual pages, though they're less convenient for readers.

In-text Citations
Brief references within the main text that point to full citations elsewhere (like a bibliography). Examples: (Smith 2020) or [1].
They maintain reading flow while providing source attribution.

Other Reference Systems in Books:
Appendices - Supplementary material, data, or detailed information referenced in the main text
Glossaries - Definitions of technical terms used throughout the book
Index - Alphabetical list of topics, names, and concepts with page numbers
Source Notes - Detailed explanations of where specific data or quotes originated
Further Reading - Suggested additional sources organized by topic or chapter
Acknowledgments - Credits to people and institutions that assisted with the research
Most academic books combine several of these systems - for example, using in-text citations that point to a bibliography, plus footnotes for additional commentary.
About the Author

book_structure_metadata.json will be another nested-dictionary that uses regex to try to split the book into pre-content, content, and post-content partitions.
We will look for keyphrases and keywords, and in general use regex to figure out if there's drastic changes in structure after each keyphrase. Making this class will be hard.

By default, the first page is part of pre-content. We


existence of any title page, copyright page, dedication, epigraph, table of contents,
list of figures, list of tables, list of maps, list of plates, list of abbreviations/acronyms, preface, foreword, acknowledgements, introduction, prologue,
numbered chapters, named chapters (which will be associated with a number),
parts/sections, subsections for each chapter.

We want page_start and page_end for every single one of these pre-content, content, post-content
parts of the book. default in our nested dictionary will be null (not a string element, but boolean I think? whatevers best).

Here's a comprehensive list of all possible "chapters" or sections that might appear in an academic book. Use these examples to figure out to create a comprehensive
class for the chapter metadata construction.


Front Matter (Pre-Content)

Title Page - Main title, subtitle, author(s), publisher
Copyright Page - Publication details, ISBN, legal notices
Dedication - Personal dedication by author
Epigraph - Inspirational quote or passage
Table of Contents - Chapter/section listings
List of Figures - Numbered figures with page references
List of Tables - Numbered tables with page references
List of Maps - If applicable
List of Plates - For books with photo/illustration sections
List of Abbreviations/Acronyms - Common abbreviations used
Preface - Author's personal introduction to the work
Foreword - Introduction written by someone other than the author
Acknowledgments - Credits and thanks (can also appear in back matter)
Introduction - Sets context, methodology, scope
Prologue - Scene-setting or background narrative

Main Content

Numbered Chapters (Chapter 1, Chapter 2, etc.)
Named Chapters (thematic titles without numbers)
Parts/Sections - Major divisions containing multiple chapters
Case Studies - Detailed examinations of specific examples
Interludes - Brief connecting sections between major parts

Back Matter (Post-Content)

Conclusion - Summary and final thoughts
Epilogue - Aftermath or future implications
Afterword - Reflective commentary, often by another author
Postscript - Additional thoughts added after main writing
Appendices (A, B, C, etc.) - Supplementary data, documents, proofs
Glossary - Definitions of technical terms
Bibliography - Comprehensive source list
References - Sources actually cited
Works Cited - Alternative term for references
Further Reading - Suggested additional sources
Notes - Footnotes/endnotes collected
Index - Alphabetical topic/name finder
About the Author - Biographical information
Colophon - Publication and design details

Special Sections

Abstract - Brief summary (more common in journals, but can appear in books)
Executive Summary - For policy/business books
Chronology/Timeline - Historical sequence of events
Genealogy/Family Trees - For historical/biographical works
Maps Section - Geographical references
Plates Section - High-quality images/photographs








examples of in-text citations structures. Use these examples as an inspiration to create a regex-based detection machine
for in-text citation, that gets enough matches to decide with 99.9% probability that in-text citations exist.

1. APA (American Psychological Association)

Format: (Author, Year) or (Author, Year, p. #)
Example: (Smith, 2020) or (Smith, 2020, p. 45)

2. MLA (Modern Language Association)

Format: (Author Page#) or (Author, "Title" Page#)
Example: (Smith 45) or (Smith, "Climate Change" 45)

3. Chicago/Turabian Author-Date

Format: (Author Year, Page#)
Example: (Smith 2020, 45)

4. Harvard Style

Format: (Author Year: Page#) or (Author, Year, p.#)
Example: (Smith 2020: 45) or (Smith, 2020, p.45)

5. Vancouver (Numerical)

Format: Superscript numbers or numbers in parentheses
Example: Text here¹ or Text here (1)

6. IEEE (Institute of Electrical and Electronics Engineers)

Format: [Number] in square brackets
Example: Text here [1] or [1, 2, 5]

7. AMA (American Medical Association)

Format: Superscript numbers
Example: Text here¹ or Text here¹,²,⁵

8. CSE (Council of Science Editors) Name-Year

Format: (Author Year)
Example: (Smith 2020)

9. APSA (American Political Science Association)

Format: (Author Year, Page#)
Example: (Smith 2020, 45)

10. AAA (American Anthropological Association)

Format: (Author Year:Page#)
Example: (Smith 2020:45)



types of reference structures


Numbered Endnotes (Global) - Sequential numbering throughout entire book (1, 2, 3...)
Numbered Endnotes (Chapter-wise) - Numbering resets per chapter (1-20 per chapter)
Author-Date In-text + Bibliography - (Smith, 2020) with full reference list
Numbered Footnotes (Page-wise) - Numbers reset on each page
Numbered Footnotes (Chapter-wise) - Numbers reset per chapter
Mixed Footnotes + Endnotes - Some references at page bottom, others at end
Superscript Numbers + Bibliography - Numbered citations linking to numbered bibliography
Bracketed Numbers - [1], [2], [3] with endnote matching
Bracketed Author-Date - [Smith 2020], [Jones 1995]
Parenthetical Citations - (see Smith 2020: 45-67)
Ibid./Op. cit. System - Latin abbreviations for repeated references
Multiple Citation Formats - [1-3], [5,7,9], [10-15] style ranges
Lettered Footnotes - a, b, c instead of numbers
Symbol Footnotes - *, †, ‡, § symbols
Chapter-specific Bibliographies - Each chapter has its own reference section
Annotated Bibliography - References with commentary/summaries
Split References - Primary sources vs. secondary sources sections
Hybrid Numbering - Roman numerals, Arabic numerals, letters combined
Contextual Citations - References embedded in running text without formal markers
Digital/URL-heavy References - Modern academic books with extensive web citations


